import type { JsonObject } from './@types';
export declare type EventKey = {
    tenantId: string;
    context: string;
    id: string;
};
export declare type EventDomainData = {
    target: string;
    scheduledDate: number;
    payload?: JsonObject;
};
export declare type Event = EventKey & EventDomainData & {
    createdAt: string;
    updatedAt?: string;
    deletedAt?: string;
    _v: string;
};
export declare type EventUpsertParams = EventKey & EventDomainData & {
    _v?: number;
};
export declare type EventUpdateParams = EventKey & Partial<EventDomainData> & {
    expectedVersion: number;
};
export declare const LAMBDA_REGIONS: readonly ["us-east-1", "us-east-2", "us-west-1", "us-west-2", "ap-northeast-1", "ap-northeast-2", "ap-southeast-1", "ap-southeast-2", "eu-central-1", "eu-west-1", "ca-central-1"];
export declare type LAMBDA_REGIONS = typeof LAMBDA_REGIONS[number];
export declare const STAGE: {
    readonly TEST: "test";
    readonly STABLE: "stable";
    readonly PROD: "prod";
};
export declare type STAGE = typeof STAGE[keyof typeof STAGE];
export declare class EventSchedulerServiceClient {
    private readonly lambdaDriver;
    constructor(stage: STAGE, region: LAMBDA_REGIONS);
    upsertEvent(params: EventUpsertParams): Promise<Event>;
    getEvent(params: EventKey): Promise<Event>;
    updateEvent(params: EventUpdateParams): Promise<Event>;
    deleteEvent(params: EventKey & {
        expectedVersion: number;
    }): Promise<Event>;
    getEventExecuted(params: EventKey): Promise<Event>;
}
