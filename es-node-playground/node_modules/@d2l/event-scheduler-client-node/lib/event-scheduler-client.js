"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSchedulerServiceClient = exports.STAGE = exports.LAMBDA_REGIONS = void 0;
const joi_1 = __importDefault(require("joi"));
const lambda_invoker_1 = require("./apiDrivers/lambda-invoker");
// function extractEventData<T extends Partial<EventDomainData>>(params: T): Partial<EventDomainData> {
// 	const filtered = {
// 		...{
// 			target: params.target,
// 			scheduledDate: params.scheduledDate,
// 			payload: params.payload,
// 		},
// 	};
// 	return filtered;
// }
const keySchema = {
    tenantId: joi_1.default.string().uuid().required(),
    context: joi_1.default.string().min(1).required(),
    id: joi_1.default.string().min(1).required(),
};
const upsertEventSchema = {
    target: joi_1.default.string().min(1).required(),
    scheduledDate: joi_1.default.number().required(),
    payload: joi_1.default.object().options({ allowUnknown: true }).optional(),
    _v: joi_1.default.number().min(0).optional(),
};
const updateEventSchema = {
    target: joi_1.default.string().min(1).optional(),
    scheduledDate: joi_1.default.number().optional(),
    payload: joi_1.default.object().options({ allowUnknown: true }).optional(),
    expectedVersion: joi_1.default.number().required(),
};
const schemas = {
    id: joi_1.default.object(keySchema),
    upsert: joi_1.default.object({
        ...keySchema,
        ...upsertEventSchema,
    }),
    get: joi_1.default.object(keySchema),
    update: joi_1.default.object({
        ...keySchema,
        ...updateEventSchema,
        // }).or(...Object.keys(updateEventSchema)),
    }),
    delete: joi_1.default.object({ ...keySchema, expectedVersion: joi_1.default.number().required() }),
};
exports.LAMBDA_REGIONS = [
    'us-east-1',
    'us-east-2',
    'us-west-1',
    'us-west-2',
    'ap-northeast-1',
    'ap-northeast-2',
    'ap-southeast-1',
    'ap-southeast-2',
    'eu-central-1',
    'eu-west-1',
    'ca-central-1'
];
exports.STAGE = {
    TEST: 'test',
    STABLE: 'stable',
    PROD: 'prod'
};
class EventSchedulerServiceClient {
    constructor(stage, region) {
        const accountId = stage === exports.STAGE.PROD ? '069721248408' : '702685132058';
        this.lambdaDriver = new lambda_invoker_1.LambdaDriver({ aws: { accountId: accountId, region: region }, stage: stage });
    }
    upsertEvent(params) {
        const validationResult = schemas.upsert.validate(params);
        if (validationResult.error) {
            throw validationResult.error;
        }
        return this.lambdaDriver.invokeServiceFunction('createEvent-humanProxy', validationResult.value);
    }
    getEvent(params) {
        const validationResult = schemas.get.validate(params);
        if (validationResult.error) {
            throw validationResult.error;
        }
        return this.lambdaDriver.invokeServiceFunction('getEvent', validationResult.value);
    }
    updateEvent(params) {
        const validationResult = schemas.update.validate(params);
        if (validationResult.error) {
            throw validationResult.error;
        }
        return this.lambdaDriver.invokeServiceFunction('updateEvent-humanProxy', validationResult.value);
    }
    deleteEvent(params) {
        const validationResult = schemas.delete.validate(params);
        if (validationResult.error) {
            throw validationResult.error;
        }
        return this.lambdaDriver.invokeServiceFunction('deleteEvent', validationResult.value);
    }
    getEventExecuted(params) {
        return this.lambdaDriver.invokeServiceFunction('getActionExecuted', params);
    }
}
exports.EventSchedulerServiceClient = EventSchedulerServiceClient;
//# sourceMappingURL=event-scheduler-client.js.map