"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LambdaDriver = void 0;
const aws_sdk_1 = __importDefault(require("aws-sdk"));
const promise_retry_1 = __importDefault(require("promise-retry"));
const lambda_envelope_1 = require("lambda-envelope");
class RetryableError extends Error {
}
const DEFAULT_LAMBDA_PARAMS = {
    InvocationType: 'RequestResponse',
    LogType: 'None'
};
class LambdaDriver {
    constructor(options) {
        this._options = options;
    }
    async invokeServiceFunction(functionName, payload) {
        const params = {
            FunctionName: `${this._options.aws.accountId}:function:event-scheduler-${this._options.stage}-${functionName}`,
            Payload: JSON.stringify(payload)
        };
        const lambdaService = new aws_sdk_1.default.Lambda({
            params: DEFAULT_LAMBDA_PARAMS,
            region: this._options.aws.region
        });
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        return (0, promise_retry_1.default)(async (retry) => {
            try {
                const lambdaResponse = await lambdaService.invoke(params).promise();
                console.log('lambdaResponse', lambdaResponse);
                if (lambdaResponse.FunctionError) {
                    console.log('inside FunctionError');
                    throw new RetryableError(lambdaResponse.FunctionError);
                }
                if (lambdaResponse.StatusCode && lambdaResponse.StatusCode > 399) {
                    throw new RetryableError(`${lambdaResponse.StatusCode}: ${lambdaResponse.Payload || 'Lambda Error Response'}`);
                }
                if (lambdaResponse.Payload) {
                    // TODO: @kcross make sure this is true
                    const formattedResponse = await lambda_envelope_1.ResponseBuilder.fromAWSResponse(lambdaResponse);
                    console.log('formattedResponse', formattedResponse);
                    return formattedResponse.body;
                }
                else {
                    throw new Error('Lambda Failed to Respond');
                }
            }
            catch (err) {
                console.log('got an error from the lambda', err);
                if (err instanceof RetryableError) {
                    console.log('we be retrying');
                    retry(err);
                }
                throw err;
            }
        }, { randomize: true });
    }
}
exports.LambdaDriver = LambdaDriver;
//# sourceMappingURL=lambda-invoker.js.map