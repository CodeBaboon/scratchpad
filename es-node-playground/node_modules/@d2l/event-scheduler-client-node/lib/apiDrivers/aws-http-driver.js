"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AwsHttpDriver = void 0;
const signature_v4_1 = require("@aws-sdk/signature-v4");
const sha256_js_1 = require("@aws-crypto/sha256-js");
const got_cjs_1 = require("got-cjs");
const joi_1 = __importDefault(require("joi"));
const aws_sdk_1 = __importDefault(require("aws-sdk"));
const HTTPMethods = {
    GET: 'GET',
    POST: 'POST',
    PUT: 'PUT',
    DELETE: 'DELETE',
};
const requestSchema = joi_1.default.object({
    method: joi_1.default.string().required().valid(...Object.values(HTTPMethods)),
    uri: joi_1.default.string().uri({ relativeOnly: true }).required(),
});
const STS = new aws_sdk_1.default.STS();
/**
 * An HTTP client that automatically handles AWS-specific considerations, including credentials and request signing.
 */
class AwsHttpDriver {
    constructor(host, roleArn) {
        this.roleArn = roleArn;
        this.host = host;
        const validationResult = joi_1.default.string().domain().validate(this.host);
        if (validationResult.error) {
            throw validationResult.error;
        }
    }
    async request(method, uri, body) {
        var _a;
        const roleResponse = await STS.assumeRole({ RoleArn: this.roleArn, RoleSessionName: 'EventSchedulerExecutorRole' }).promise();
        console.log(roleResponse);
        if (!roleResponse.Credentials || roleResponse.$response.error) {
            throw new Error(roleResponse.$response.error ? roleResponse.$response.error.message : 'Failed to get assume role');
        }
        const credentials = {
            accessKeyId: roleResponse.Credentials.AccessKeyId,
            secretAccessKey: roleResponse.Credentials.SecretAccessKey,
            expiration: roleResponse.Credentials.Expiration,
            sessionToken: roleResponse.Credentials.SessionToken
        };
        const requestSigner = new signature_v4_1.SignatureV4({
            applyChecksum: false,
            credentials: credentials,
            service: 'apigatewayv2',
            region: (_a = process.env.AWS_REGION) !== null && _a !== void 0 ? _a : 'us-east-1',
            sha256: sha256_js_1.Sha256,
        });
        const validationResult = requestSchema.validate({
            method,
            uri,
        });
        if (validationResult.error) {
            throw validationResult.error;
        }
        const options = {
            headers: {},
            path: uri,
            method: method,
            protocol: 'https',
            hostname: this.host,
        };
        if (body) {
            options.body = JSON.stringify(body);
            options.headers = { 'Content-Type': 'application/json' };
        }
        const signedRequest = await requestSigner.sign(options);
        // I have to do this because signedRequest.method is string, and got expects Method | undefined smh
        const gotRequest = {
            method: signedRequest.method,
            url: `${signedRequest.protocol}://${this.host}${signedRequest.path}`,
            headers: signedRequest.headers,
            body: signedRequest.body,
        };
        try {
            return await (0, got_cjs_1.got)(gotRequest).json();
        }
        catch (err) {
            if (err instanceof got_cjs_1.HTTPError) {
                console.error(`${err.code}: ${err.message}`);
                throw err;
            }
            console.log(err);
            throw err;
        }
    }
}
exports.AwsHttpDriver = AwsHttpDriver;
//# sourceMappingURL=aws-http-driver.js.map